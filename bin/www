#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('starter:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


///socket io
const socketio = require('socket.io');
const io = socketio(server)
const {Room, Message} = require('../db/models')

io.on('connection', async (socket) => {
  let user =''
  socket.on('join', async ({ name, room, roomId }, callback) => {
    // console.log('connecteddddddddddddddddd')
    user = { id:socket.id, name, room };
    if (user.room) {
    // socket.join(user.room);
    // socket.emit('message', { user: 'admin', text: `${user.name}, welcome to room ${user.room}.`});
    // socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name} has joined!` });
    const allMessages = await Message.findAll({
      where:{
        roomId
      }
    })
    for (let message of allMessages){
    socket.emit('message', { user: message.name, text: message.text});
    }
    // io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });

    callback();
  }
  });

  // socket.on('sendMessage', (message, callback) => {

  //   io.to(user.room).emit('message', { user: user.name, text: message });

  //   callback();
  // });
const {addMessageToRoom} = require("../routes/utils/chat")
  const rooms = await Room.findAll();
  for (let room of rooms) {
    socket.on(`${room.id}`, async(message, callback) =>{
      const newMessages = await addMessageToRoom(user.name, user.room, message, room.id)
      io.to(user.room).emit('message', { user: user.name, text: message });
      // io.emit('message', { user: user.name, text: message })
      // console.log(message)
      socket.broadcast.emit("message", { user: user.name, text: message })
      callback();
    })
  }
  

  socket.on('disconnect', () => {
    console.log('disconnect')
    // socket.broadcast.emit("disconnect-user")
    // if(user) {
    //   io.to(user.room).emit('message', { user: '', text: `Message done` });
    // }
     user =''
    socket.disconnect()
  })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
